name: app

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TEST_IMAGE: birthday-reminder/app-test:latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./.docker/php/Dockerfile
          target: test
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY }}/${{ env.TEST_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Pull test image
        uses: './.github/actions/pull-test-image'
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          registry-username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          image: ${{ env.TEST_IMAGE }}

      - name: Run PHP CS Fixer
        if: success() || failure()
        run: docker run --rm ${{ env.TEST_IMAGE }} vendor/bin/php-cs-fixer fix --dry-run --config=.php-cs-fixer.dist.php -v --using-cache=no

      - name: Run Psalm
        if: success() || failure()
        run: |
          docker run --rm --volume $PWD/.git:/app/.git ${{ env.TEST_IMAGE }} /bin/sh -c \
            "git config --global --add safe.directory /app && \
            vendor/bin/psalm \
            --show-info=true \
            --output-format=github \
            --shepherd \
            --stats"

      - name: Run Infection
        if: success() || failure()
        run: |
          mkdir -p -m 777 var/output/infection
          docker run --rm --volume $PWD/var/output:/app/var/output --volume $PWD/.git:/app/.git ${{ env.TEST_IMAGE }} /bin/sh -c \
            "git config --global --add safe.directory /app && \
            vendor/bin/infection \
            --threads=4 \
            --min-msi=20 \
            --min-covered-msi=40 \
            --logger-html='var/output/infection/mutation-report.html'"

      - name: Upload mutation report
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: mutation-report
          path: var/output/infection/mutation-report.html

  test-acceptance:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Pull test image
        uses: './.github/actions/pull-test-image'
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          registry-username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          image: ${{ env.TEST_IMAGE }}

      - name: Run acceptance tests
        run: bin/test-acceptance.sh

  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Pull test image
        uses: './.github/actions/pull-test-image'
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          registry-username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          registry-password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          image: ${{ env.TEST_IMAGE }}

      - name: Run unit tests
        run: docker run --rm ${{ env.TEST_IMAGE }} vendor/bin/phpunit
