#!/usr/bin/env php
<?php

use Psr\Http\Message\ServerRequestInterface;
use Spiral\RoadRunner\Http\PSR7Worker;
use Spiral\RoadRunner\Worker;
use Nyholm\Psr7\Factory\Psr17Factory;
use Nyholm\Psr7\Response;
use Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory;
use Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory;
use Vkbd\Kernel;

declare(strict_types=1);

require_once __DIR__ . "/../vendor/autoload.php";

$worker = Worker::create();
$psrFactory = new Psr17Factory();

$requestFactory = new HttpFoundationFactory();
$responseFactory = new PsrHttpFactory($psrFactory, $psrFactory, $psrFactory, $psrFactory);

$psr7 = new PSR7Worker($worker, $psrFactory, $psrFactory, $psrFactory);

while (true) {
    try {
        $psr7Request = $psr7->waitRequest();

        // Received termination request
        if (!$psr7Request instanceof ServerRequestInterface) {
            break;
        }
    } catch (Throwable) {
        $psr7->respond(new Response(400));
        continue;
    }

    try {
        $kernel = new Kernel(getenv('APP_ENV'), (bool) getenv('APP_DEBUG'));

        $request = $requestFactory->createRequest($psr7Request);

        $response = $kernel->handle($request);

        $worker->respond($responseFactory->createResponse($response));

        $kernel->terminate($request, $response);
    } catch (Throwable $e) {
        $worker->error((string) $e);
    }
}
